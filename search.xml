<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数组的善用</title>
      <link href="/2020/03/27/%E6%95%B0%E7%BB%84%E7%9A%84%E5%96%84%E7%94%A8/"/>
      <url>/2020/03/27/%E6%95%B0%E7%BB%84%E7%9A%84%E5%96%84%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="所以例题均来自PAT的题库"><a href="#所以例题均来自PAT的题库" class="headerlink" title="所以例题均来自PAT的题库"></a>所以例题均来自PAT的题库</h1><p><a href="https://www.patest.cn/" target="_blank" rel="noopener" title="PAT题库">https://www.patest.cn/</a></p><p>直接上例题</p><p><strong>一</strong></p><p>输入两个非负 10 进制整数 A 和 B (≤2<br>​30<br>​​ −1)，输出 A+B 的 D (1&lt;D≤10)进制数。</p><p>输入格式：</p><p>输入在一行中依次给出 3 个整数 A、B 和 D。</p><p>输出格式：</p><p>输出 A+B 的 D 进制数。</p><p>输入样例：</p><p>123 456 8</p><p>输出样例：</p><p>1103</p><p><strong>思路</strong>： 1.十进制如何转化为其他进制？</p><p>对基取余法</p><p>123+456=579</p><p>579%8=72  ····3</p><p>72%8=9   ·····0</p><p>9%8=1   ·····1</p><p>1%8=0   ·····1</p><p>2.如何才能输出余数，采用数组存储，进行从低位到高位的枚举，最后再从高位到低位进行输出</p><pre><code>`#include &lt;stdio.h&gt; int main(){int A, B, D,sum=0;scanf(&quot;%d%d%d&quot;, &amp;A, &amp;B, &amp;D);sum = A + B;int a[31], num = 0;do{    a[num++] = sum%D;    sum = sum / D;} while (sum != 0);for (int i = num-1; i &gt;= 0; i--){    printf(&quot;%d&quot;, a[i]);}return 0;}`</code></pre><p><strong>二</strong></p><p>让我们用字母 B 来表示“百”、字母 S 表示“十”，用 12…n 来表示不为零的个位数字 n（&lt;10），换个格式来输出任一个不超过 3 位的正整数。例如 234 应该被输出为 BBSSS1234，因为它有 2 个“百”、3 个“十”、以及个位的 4。</p><p>输入格式：</p><p>每个测试输入包含 1 个测试用例，给出正整数 n（&lt;1000）。</p><p>输出格式：</p><p>每个测试用例的输出占一行，用规定的格式输出 n。</p><p>输入样例 1：</p><p>234</p><p>输出样例 1：</p><p>BBSSS1234</p><p>输入样例 2：</p><p>23</p><p>输出样例 2：</p><p>SS123</p><p><strong>思路：</strong>对测试例求余用数组保存，从高位到低位进行枚举输出</p><pre><code>`#include &lt;stdio.h&gt; int main(){int n;int a[5], num = 0;scanf(&quot;%d&quot;, &amp;n);while (n != 0){    a[num] = n % 10;    num++;    n = n / 10;}for (int i=num-1;i&gt;=0;i--){    if (i == 2)    {        for (int j = 0; j &lt; a[i]; j++)            printf(&quot;B&quot;);    }    else if (i == 1) {        for (int j = 0; j &lt; a[i]; j++)            printf(&quot;S&quot;);    }    else        for (int j = 1; j &lt;=a[i]; j++)        {            printf(&quot;%d&quot;,j);        }}return 0;}`</code></pre><p><strong>三</strong></p><p>给定一个 k 位整数 N=d<br>​k−1<br>​​ 10<br>​k−1<br>​​ +⋯+d<br>​1<br>​​ 10<br>​1<br>​​ +d<br>​0<br>​​  (0≤d<br>​i<br>​​ ≤9, i=0,⋯,k−1, d<br>​k−1<br>​​ &gt;0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定 N=100311，则有 2 个 0，3 个 1，和 1 个 3。</p><p>输入格式：</p><p>每个输入包含 1 个测试用例，即一个不超过 1000 位的正整数 N。</p><p>输出格式：</p><p>对 N 中每一种不同的个位数字，以 D:M 的格式在一行中输出该位数字 D 及其在 N 中出现的次数 M。要求按 D 的升序输出。</p><p>输入样例：</p><p>100311</p><p>输出样例：</p><p>0:2</p><p>1:3</p><p>3:1</p><p><strong>思路：</strong></p><p>1.以字符数组形式存储数据，记录长度</p><p>2采用字符相减，字符相减等同于ASCII的相减，由于输入例都是int， a[0]-‘0’=1</p><p>3采用枚举从低到高输出</p><pre><code>`#include &lt;stdio.h&gt; #include &lt;string.h&gt; int main(){char c[1010];scanf(&quot;%s&quot;,c);int len = strlen(c);int a[10] = { 0 };for (int i = 0; i &lt; len; i++){    a[c[i] - &apos;0&apos;]++;}for (int i = 0; i &lt; 10; i++){    if (a[i] != 0)    {        printf(&quot;%d:%d\n&quot;, i, a[i]);    }}return 0;}`</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 善用数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 白岩松 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字枚举法</title>
      <link href="/2020/03/18/%E6%95%B0%E5%AD%97%E6%9E%9A%E4%B8%BE%E6%B3%95/"/>
      <url>/2020/03/18/%E6%95%B0%E5%AD%97%E6%9E%9A%E4%B8%BE%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="数字枚举法"><a href="#数字枚举法" class="headerlink" title="数字枚举法"></a>数字枚举法</h1><h2 id="输入一串数字寻找相同数字个数，数字大小值等问题"><a href="#输入一串数字寻找相同数字个数，数字大小值等问题" class="headerlink" title="输入一串数字寻找相同数字个数，数字大小值等问题"></a>输入一串数字寻找相同数字个数，数字大小值等问题</h2><p>枚举法看似很难，其实就是最简单的对<strong>一串连续数字***</strong>求余***，下面例子说明 ##</p><p>1.求个数问题(只给出关键部分)</p><pre><code>`     long long A;     int a,tep=0;     scanf(&quot;%lld%d&quot;,&amp;A,&amp;a);     while(A != 0)     {        if (A % 10 == a)    {        tep++;    }    A = A / 10;        }`</code></pre><p>2.求相同数字相加问题等</p><pre><code>`int Da; long long A,Pa;    scanf(&quot;%lld%d&quot;,&amp;A,&amp;Da); while (A != 0){  if (A % 10 == Da)  {      Pa = Pa + Da;  }  A = A / 10;}`</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 枚举法例子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A + B</title>
      <link href="/2020/03/18/A+B/"/>
      <url>/2020/03/18/A+B/</url>
      
        <content type="html"><![CDATA[<p>在基础算法中,A+B类的题型很常见，从最基础普通到各类变种，考察的知识点也各不相同，下面将依次举例</p><ol><li><strong>基础型（A+B和C）</strong></li></ol><p>给定区间 [−2<br>​31<br>​​ ,2<br>​31<br>​​ ] 内的 3 个整数 A、B 和 C，请判断 A+B 是否大于 C。<br>输入格式：</p><p>输入第 1 行给出正整数 T (≤10)，是测试用例的个数。随后给出 T 组测试用例，每组占一行，顺序给出 A、B 和 C。整数间以空格分隔。</p><p>输出格式：</p><p>对每组测试用例，在一行中输出 Case #X: true 如果 A+B&gt;C，否则输出 Case #X: false，其中 X 是测试用例的编号（从 1 开始）。</p><p>输入样例：</p><p>4</p><p>1 2 3</p><p>2 3 4</p><p>2147483647 0 2147483646</p><p>0 -2147483648 -2147483647</p><p>输出样例：</p><p>Case #1: false</p><p>Case #2: true</p><p>Case #3: true</p><p>Case #4: false</p><p>对于此类题型，无需思考，直接硬解，唯一考虑的是<strong>变量的取值范围</strong>，<strong>int</strong> 取值范围 <strong>-2的31次方~2的31次方-1</strong>  也就是大概在<strong>-2×10的9次方~2×10的9次方</strong><br><strong>long long</strong> 取值范围 <strong>-2的63次方~2的63次方-1</strong>  大概在<strong>-9×10的18次方~9×10的18次方</strong><br>代码如下：</p><pre><code>`#include &lt;stdio.h&gt; long long A, B, C; int main(){int T, tep=1;scanf(&quot;%d&quot;,&amp;T);for(int i=0;i&lt;T;i++){    scanf(&quot;%lld%lld%lld&quot;,&amp;A,&amp;B,&amp;C);    if (A + B &gt; C)    {        printf(&quot;Case #%d: true\n&quot;, tep++);    }    else    {        printf(&quot;Case #%d: false\n&quot;, tep++);    }}return 0; }`</code></pre><p>2.<strong>变种型（A + B 和 C （64bit））</strong></p><p>Given three integers A, B and C in [−2<br>​63<br>​​ ,2<br>​63<br>​​ ], you are supposed to tell whether A+B&gt;C.</p><p>Input Specification:</p><p>The first line of the input gives the positive number of test cases, T (≤10). Then T test cases follow, each consists of a single line containing three integers A, B and C, separated by single spaces.</p><p>Output Specification:</p><p>For each test case, output in one line Case #X: true if A+B&gt;C, or Case #X: false otherwise, where X is the case number (starting from 1).</p><p>Sample Input:</p><p>3</p><p>1 2 3</p><p>2 3 4</p><p>9223372036854775807 -9223372036854775808 0</p><p>Sample Output:</p><p>Case #1: false</p><p>Case #2: true</p><p>Case #3: false</p><p>此题则需要考虑<strong>两数之和是否溢出</strong>问题，此时重点便是<strong>两个正数之和等于负数或是两个负数之和等于正数，便是溢出</strong>，这一点也是笔者学习后知道的…  这一点在计算机组成原理中有说明， 怪我自己没学好。<br>①.A+B&gt;=2的63次方，结果A+B&gt;C肯定成立，但相加后的结果肯定会正溢出，而正溢出值得区间为[-2的63次方，-2]<br>②.A+B&lt;-2的63次方，A+B&lt;C肯定成立，同理会负溢出，负溢出区间[0,2的63次方]<br>全部结果的输出，则用bool代替，true,false.</p><p>代码如下：</p><pre><code>`#include &lt;stdio.h&gt; #define true 1 #define false 0int main(){int n;bool flag;int tep = 1;scanf(&quot;%d&quot;, &amp;n);for (int i=0;i&lt;n;i++){    long long a, b, c,res;    scanf(&quot;%ld%ld%ld&quot;,&amp;a,&amp;b,&amp;c);    res = a + b;    if (a &gt; 0 &amp;&amp; b &gt; 0 &amp;&amp; res &lt; 0) { flag = 1; }    else if (a &lt; 0 &amp;&amp; b &lt; 0 &amp;&amp; res&gt;=0) { flag = 0; }    else if (a + b &gt; c) { flag = 1; }    else  flag = 0;     if (flag == 1) {        printf(&quot;Case #%d: true&quot;, tep++);    }    else        printf(&quot;Case #%d: false&quot;,tep++);}return 0;}`</code></pre><p>3.<strong>类似型（A+B）</strong></p><p>此类型借用A+B为载体，做其他运算，具体例子在<strong><a href="http://https://www.big-w.cn/2020/03/18/%E6%95%B0%E5%AD%97%E6%9E%9A%E4%B8%BE%E6%B3%95/" target="_blank" rel="noopener">http://https://www.big-w.cn/2020/03/18/%E6%95%B0%E5%AD%97%E6%9E%9A%E4%B8%BE%E6%B3%95/</a></strong>   此处不再过多说明，具体就是 <strong>枚举法</strong>的应用</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> A + B </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C基础杂段</title>
      <link href="/2020/03/17/C%E5%9F%BA%E7%A1%80%E6%9D%82%E6%AE%B5/"/>
      <url>/2020/03/17/C%E5%9F%BA%E7%A1%80%E6%9D%82%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="1-符号常量"><a href="#1-符号常量" class="headerlink" title="1.符号常量"></a><strong>1.符号常量</strong></h1><p>1.#define<br>  常见用法不再啰嗦<br>  <strong>宏定义语句： #define C(a,b)  ((a)+(b))</strong><br>  `<br>   #include &lt;stdio.h&gt;</p><p>   #define C(a,b)  ((a)+(b))</p><p>   int main(){</p><p>   int x=3,y=1;</p><p>   printf(“%d”,C(x,y));</p><p>   return 0;</p><p>   }<br>`</p><p>2.<strong>const 数据类型 变量名 = 常量；</strong></p><p>   eg const int a = 3;</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><strong>运算符</strong></h1><p>1.三目运算符<br>  A ? B : C  如果A为真，则执行B  如果A为假，则执行C<br>2.位运算符<br>  &lt;&lt;  左移           右移  &gt;&gt;</p><h1 id="输入、输出-scanf-printf"><a href="#输入、输出-scanf-printf" class="headerlink" title="输入、输出(scanf,printf)"></a><strong>输入、输出(scanf,printf)</strong></h1><p>1.scanf<br>输入“1 2”用空格隔开的数字，两个%d之间可不加空格<br>    <code>int a,b;     scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</code><br>原因：除了%c外，scanf对其他的输入都是以空白符为结束标志（空格、TAB）<br>2.printf<br>对于double类型的输出 <strong>最好使用%f</strong>,而不是%lf,在输入时则用%lf<br>3.实用输出格式</p><ul><li>输出带有% / 等符号，则只需要printf(“%%”) (“//”)</li><li>%md 则是自动以m位右对齐输出，eg  %5d 右对齐5位输出</li><li>%0md 则是自动以m位0右对齐输出</li><li>%.mf 可以让浮点数保留m位小数输出<h1 id="常用math函数"><a href="#常用math函数" class="headerlink" title="常用math函数"></a><strong>常用math函数</strong></h1></li><li>fabs(double x) 对x变量取绝对值</li><li>floor(double x)  ceil(double x) 分别对x变量向下取整 和 向上取整</li><li>pow(double r,double p) 用于返回r的p次方</li><li>sqrt(double x)用于返回x的算数平方根</li><li>log(double x)用于返回以自然数为底的对数  *<em>C中没有对任意底数求对数的函数，必须使用 换底公式 来将不是以自然数为底的对数转化为以e为底的对数,logab=logeb/logea *</em></li><li>round(double x)将x四舍五入<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a><strong>数组</strong></h1></li></ul><ol><li>字符串数组%s,在输入时通常 <strong>空格 换行</strong> 为<strong>输入结束标志</strong>  </li><li>字符串%c，在输入时 空格 换行 则是跟普通字符等价，可以读入</li><li>数组快速统一值 memset（数组名，需要统一的数值，sizeof(数组名)）</li><li>数组可做参数，但不能作为返回类型出现，<strong>作为参数时，在函数中对数组元素的修改就是对原数组元素的修改</strong></li></ol><h1 id="String-h头文件中常用函数"><a href="#String-h头文件中常用函数" class="headerlink" title="String.h头文件中常用函数"></a><strong>String.h头文件中常用函数</strong></h1><ul><li>strlen() 得到字符数组中第一个\0前的字符个数</li><li>strcmp() 返回两字符串大小的比价结果，原则时按照字典序 strcmp(s1,s2);</li><li>strcpy(s1,s2)  复制 把s2复制到s1上，包括了结束符\0</li><li>strcat(s1,s2) 将s2数组接到s1后</li></ul><p><em>杂记</em><br>\0代表空字符NULL ASCII值为0  \0不是空格</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白岩松《白说：读书、阅人、知时》</title>
      <link href="/2020/03/02/%E7%99%BD%E5%B2%A9%E6%9D%BE%E3%80%8A%E7%99%BD%E8%AF%B4%EF%BC%9A%E8%AF%BB%E4%B9%A6%E3%80%81%E9%98%85%E4%BA%BA%E3%80%81%E7%9F%A5%E6%97%B6%E3%80%8B/"/>
      <url>/2020/03/02/%E7%99%BD%E5%B2%A9%E6%9D%BE%E3%80%8A%E7%99%BD%E8%AF%B4%EF%BC%9A%E8%AF%BB%E4%B9%A6%E3%80%81%E9%98%85%E4%BA%BA%E3%80%81%E7%9F%A5%E6%97%B6%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>#知识并不等于智慧 #<br>白岩松一直是我很喜欢的，各方面颇有独特见解的人。</p><p>自媒体、官微、上瘾、书、手机</p><p>举其中一例来略讲，抖音之所以能火，并且能迅速超越其他短视频，并不是该产品设计得如何好，产品设计者、开发者们如何编程得多好，最为主要的是开发当初，便抓住人性的上瘾–随机性奖励、易获取、无尽头</p><p>以下附上B站白岩松演讲视频</p><p><strong><em><a href="https://www.bilibili.com/video/av63438257/" target="_blank" rel="noopener">https://www.bilibili.com/video/av63438257/</a></em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
          <category> 演讲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 白岩松 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
